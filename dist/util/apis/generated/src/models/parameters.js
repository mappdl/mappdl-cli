"use strict";
/*
 * Copyright (c) MappDL Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by MappDL (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.id1 = exports.groupId1 = exports.groupId = exports.mandatoryUpdate2 = exports.id = exports.storeId = exports.notifyTesters = exports.email4 = exports.mandatoryUpdate1 = exports.testerId1 = exports.releaseId2 = exports.mandatoryUpdate = exports.testerId = exports.udid = exports.releaseHash = exports.appSecret = exports.email3 = exports.email2 = exports.token = exports.role5 = exports.userEmail6 = exports.permissions = exports.userEmail4 = exports.userEmail3 = exports.role4 = exports.userEmail1 = exports.role3 = exports.role2 = exports.email = exports.invitationToken = exports.userName = exports.orgName = exports.role = exports.displayName = exports.installId = exports.releaseId1 = exports.udids = exports.unprovisionedOnly = exports.distributionGroupName = exports.appName = exports.ownerName = exports.includeProvisioningProfile = exports.resignId = exports.releaseId = exports.deviceUdid = exports.userId = exports.$host = exports.accept = exports.body = exports.contentType = void 0;
exports.orgName1 = exports.name7 = exports.displayName6 = exports.name6 = exports.displayName5 = exports.subscriptionId = exports.azureSubscriptionId = exports.description = exports.name5 = exports.displayName4 = exports.displayName3 = exports.name4 = exports.permissions2 = exports.userEmail8 = exports.teamName = exports.displayName2 = exports.name3 = exports.isPublic1 = exports.name2 = exports.userEmails5 = exports.excludePendingInvitations = exports.userEmails4 = exports.userEmails3 = exports.displayName1 = exports.name1 = exports.isPublic = exports.name = exports.apps3 = exports.apps1 = exports.userEmails2 = exports.userEmails1 = exports.userEmails = exports.appsLimit = exports.orderBy = exports.app2 = exports.app1 = exports.accept1 = exports.avatar = exports.contentType1 = exports.destinationOwnerName = exports.permissions1 = exports.app = exports.scope = exports.publishedOnly = exports.body5 = exports.build = exports.releaseNotes = exports.enabled = exports.notifyTesters1 = exports.mandatoryUpdate3 = void 0;
exports.testRunId = exports.name12 = exports.query = exports.name11 = exports.testSeriesSlug = exports.name9 = exports.devices1 = exports.name8 = exports.devices = exports.id2 = exports.errorType = exports.appVersion1 = exports.dateTo = exports.dateFrom = exports.retentionDelete = exports.includeStacktrace = exports.includeDetails = exports.includeLog = exports.includeReport = exports.groupingOnly = exports.crashGroupId = exports.attachmentId = exports.date = exports.crashId = exports.debug = exports.sourceVersion = exports.maxSearchDepth = exports.platform = exports.os = exports.branch = exports.status = exports.distributeInfo = exports.downloadType = exports.buildId = exports.tools = exports.releaseMetadata1 = exports.releaseMetadata = exports.isCompanion = exports.clientUniqueId = exports.label = exports.packageHash = exports.appVersion = exports.deploymentKey = exports.period2 = exports.service2 = exports.period1 = exports.service1 = exports.showOriginalPlans = exports.period = exports.service = void 0;
exports.start = exports.retentionInDays = exports.skip = exports.top2 = exports.sort = exports.order = exports.q = exports.filter = exports.attachmentId1 = exports.errorId = exports.properties5 = exports.properties4 = exports.exportConfigurationId = exports.payload = exports.blobContainerSasUri = exports.exportId = exports.values = exports.notificationContent = exports.notificationTarget = exports.includeArchived = exports.inlinecount = exports.orderby = exports.skiptoken = exports.top1 = exports.notificationId = exports.properties1 = exports.repo = exports.includeInactive = exports.form = exports.serviceConnectionId = exports.vstsProjectId = exports.vstsAccountName = exports.sourceHost = exports.body7 = exports.symbolType = exports.status2 = exports.top = exports.status1 = exports.symbolUploadId = exports.symbolId = exports.appUploadId = exports.devices4 = exports.name14 = exports.devices3 = exports.name13 = exports.devices2 = exports.fileInfo1 = exports.fileInfo = exports.testRunId1 = exports.startOptions = void 0;
exports.orderby1 = exports.groupTextSearch = exports.groupStatus = exports.groupType = exports.lastOccurrenceTo = exports.lastOccurrenceFrom = exports.annotation1 = exports.status3 = exports.accountName = exports.aCAuthorizationARM = exports.provisionDatabaseParameters = exports.latestRelease = exports.name16 = exports.key = exports.name15 = exports.body11 = exports.promoteDeploymentName = exports.release1 = exports.uploadedRelease = exports.releaseLabel1 = exports.release = exports.label1 = exports.top3 = exports.symbolGroupId = exports.body10 = exports.serviceConnectionId1 = exports.body8 = exports.releaseId3 = exports.storeName = exports.errorType5 = exports.version1 = exports.errorType4 = exports.inlinecount1 = exports.filter1 = exports.errorType3 = exports.errorType2 = exports.groupState = exports.sort1 = exports.order1 = exports.annotation = exports.state = exports.version = exports.os1 = exports.model = exports.format = exports.errorGroupId = exports.errorType1 = exports.appBuild = exports.versions = exports.end = void 0;
exports.scope2 = exports.description4 = exports.appBuild1 = exports.includeDisabled = exports.audience1 = exports.contains = exports.propertyName = exports.audience = exports.audienceName = exports.crashGroups1 = exports.releases1 = exports.inlinecount2 = exports.eventName1 = exports.top4 = exports.eventPropertyName = exports.eventName = exports.start1 = exports.interval = exports.scope1 = exports.description2 = exports.apiTokenId = exports.body12 = exports.searchTerm = exports.aCAuthorizationAADGraph = exports.params2 = exports.params1 = exports.hashes = exports.continuationToken = void 0;
const mappers_1 = require("../models/mappers");
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.body = {
    parameterPath: "body",
    mapper: mappers_1.Paths1Jpgih6V01UsersUserIdDevicesRegisterPostRequestbodyContentApplicationJsonSchema
};
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.userId = {
    parameterPath: "userId",
    mapper: {
        serializedName: "user_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.deviceUdid = {
    parameterPath: "deviceUdid",
    mapper: {
        serializedName: "device_udid",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.releaseId = {
    parameterPath: "releaseId",
    mapper: {
        serializedName: "release_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.resignId = {
    parameterPath: "resignId",
    mapper: {
        serializedName: "resign_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.includeProvisioningProfile = {
    parameterPath: ["options", "includeProvisioningProfile"],
    mapper: {
        serializedName: "include_provisioning_profile",
        type: {
            name: "Boolean"
        }
    }
};
exports.ownerName = {
    parameterPath: "ownerName",
    mapper: {
        serializedName: "owner_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.appName = {
    parameterPath: "appName",
    mapper: {
        serializedName: "app_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.distributionGroupName = {
    parameterPath: "distributionGroupName",
    mapper: {
        serializedName: "distribution_group_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.unprovisionedOnly = {
    parameterPath: ["options", "unprovisionedOnly"],
    mapper: {
        defaultValue: false,
        serializedName: "unprovisioned_only",
        type: {
            name: "Boolean"
        }
    }
};
exports.udids = {
    parameterPath: ["options", "udids"],
    mapper: {
        serializedName: "udids",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
exports.releaseId1 = {
    parameterPath: ["options", "releaseId"],
    mapper: {
        serializedName: "release_id",
        type: {
            name: "Number"
        }
    }
};
exports.installId = {
    parameterPath: "installId",
    mapper: {
        serializedName: "install_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.displayName = {
    parameterPath: ["options", "displayName"],
    mapper: mappers_1.Paths2EstpdV01UserPatchRequestbodyContentApplicationJsonSchema
};
exports.role = {
    parameterPath: ["options", "role"],
    mapper: mappers_1.PathsP1N751V01OrgsOrgNameUsersUserNamePatchRequestbodyContentApplicationJsonSchema
};
exports.orgName = {
    parameterPath: "orgName",
    mapper: {
        serializedName: "org_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.userName = {
    parameterPath: "userName",
    mapper: {
        serializedName: "user_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.invitationToken = {
    parameterPath: "invitationToken",
    mapper: {
        serializedName: "invitation_token",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.email = {
    parameterPath: "email",
    mapper: {
        serializedName: "email",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.role2 = {
    parameterPath: ["options", "role"],
    mapper: mappers_1.PathsMtzmgwV01OrgsOrgNameInvitationsEmailResendPostRequestbodyContentApplicationJsonSchema
};
exports.role3 = {
    parameterPath: ["options", "role"],
    mapper: mappers_1.Paths8S96O5V01OrgsOrgNameInvitationsEmailPatchRequestbodyContentApplicationJsonSchema
};
exports.userEmail1 = {
    parameterPath: "userEmail",
    mapper: mappers_1.PathsVoxne2V01OrgsOrgNameInvitationsPostRequestbodyContentApplicationJsonSchema
};
exports.role4 = {
    parameterPath: ["options", "role"],
    mapper: mappers_1.PathsVoxne2V01OrgsOrgNameInvitationsPostRequestbodyContentApplicationJsonSchema
};
exports.userEmail3 = {
    parameterPath: "userEmail",
    mapper: mappers_1.Paths2KqsncV01OrgsOrgNameInvitationsDeleteRequestbodyContentApplicationJsonSchema
};
exports.userEmail4 = {
    parameterPath: "userEmail",
    mapper: {
        serializedName: "user_email",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.permissions = {
    parameterPath: "permissions",
    mapper: mappers_1.Paths1Uclv96V01AppsOwnerNameAppNameInvitationsUserEmailPatchRequestbodyContentApplicationJsonSchema
};
exports.userEmail6 = {
    parameterPath: "userEmail",
    mapper: mappers_1.Paths1CzjavmV01AppsOwnerNameAppNameInvitationsPostRequestbodyContentApplicationJsonSchema
};
exports.role5 = {
    parameterPath: ["options", "role"],
    mapper: mappers_1.Paths1CzjavmV01AppsOwnerNameAppNameInvitationsPostRequestbodyContentApplicationJsonSchema
};
exports.token = {
    parameterPath: "token",
    mapper: {
        serializedName: "token",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
exports.email2 = {
    parameterPath: "email",
    mapper: mappers_1.PathsQga5LlV01UserDsrDeleteTokenCancelPostRequestbodyContentApplicationJsonSchema
};
exports.email3 = {
    parameterPath: "email",
    mapper: {
        serializedName: "email",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.appSecret = {
    parameterPath: "appSecret",
    mapper: {
        serializedName: "app_secret",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.releaseHash = {
    parameterPath: "releaseHash",
    mapper: {
        serializedName: "release_hash",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.udid = {
    parameterPath: ["options", "udid"],
    mapper: {
        serializedName: "udid",
        type: {
            name: "String"
        }
    }
};
exports.testerId = {
    parameterPath: "testerId",
    mapper: {
        serializedName: "tester_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.mandatoryUpdate = {
    parameterPath: "mandatoryUpdate",
    mapper: mappers_1.PathsOjvewzV01AppsOwnerNameAppNameReleasesReleaseIdTestersTesterIdPutRequestbodyContentApplicationJsonSchema
};
exports.releaseId2 = {
    parameterPath: "releaseId",
    mapper: {
        serializedName: "release_id",
        required: true,
        type: {
            name: "Number"
        }
    }
};
exports.testerId1 = {
    parameterPath: "testerId",
    mapper: {
        serializedName: "tester_id",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
exports.mandatoryUpdate1 = {
    parameterPath: ["options", "mandatoryUpdate"],
    mapper: mappers_1.PathsF6Ye6UV01AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequestbodyContentApplicationJsonSchema
};
exports.email4 = {
    parameterPath: "email",
    mapper: mappers_1.PathsF6Ye6UV01AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequestbodyContentApplicationJsonSchema
};
exports.notifyTesters = {
    parameterPath: ["options", "notifyTesters"],
    mapper: mappers_1.PathsF6Ye6UV01AppsOwnerNameAppNameReleasesReleaseIdTestersPostRequestbodyContentApplicationJsonSchema
};
exports.storeId = {
    parameterPath: "storeId",
    mapper: {
        serializedName: "store_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.id = {
    parameterPath: "id",
    mapper: mappers_1.Paths19I3T9ZV01AppsOwnerNameAppNameReleasesReleaseIdStoresPostRequestbodyContentApplicationJsonSchema
};
exports.mandatoryUpdate2 = {
    parameterPath: "mandatoryUpdate",
    mapper: mappers_1.Paths1Y3U3TvV01AppsOwnerNameAppNameReleasesReleaseIdGroupsGroupIdPutRequestbodyContentApplicationJsonSchema
};
exports.groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "group_id",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
exports.groupId1 = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "group_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.id1 = {
    parameterPath: "id",
    mapper: mappers_1.Paths1Jif7RyV01AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequestbodyContentApplicationJsonSchema
};
exports.mandatoryUpdate3 = {
    parameterPath: ["options", "mandatoryUpdate"],
    mapper: mappers_1.Paths1Jif7RyV01AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequestbodyContentApplicationJsonSchema
};
exports.notifyTesters1 = {
    parameterPath: ["options", "notifyTesters"],
    mapper: mappers_1.Paths1Jif7RyV01AppsOwnerNameAppNameReleasesReleaseIdGroupsPostRequestbodyContentApplicationJsonSchema
};
exports.enabled = {
    parameterPath: ["options", "enabled"],
    mapper: mappers_1.PathsQ3NwdwV01AppsOwnerNameAppNameReleasesReleaseIdPutRequestbodyContentApplicationJsonSchema
};
exports.releaseNotes = {
    parameterPath: ["options", "releaseNotes"],
    mapper: mappers_1.PathsQ3NwdwV01AppsOwnerNameAppNameReleasesReleaseIdPutRequestbodyContentApplicationJsonSchema
};
exports.build = {
    parameterPath: ["options", "build"],
    mapper: mappers_1.PathsQ3NwdwV01AppsOwnerNameAppNameReleasesReleaseIdPutRequestbodyContentApplicationJsonSchema
};
exports.body5 = {
    parameterPath: "body",
    mapper: mappers_1.Paths1Veut4NV01AppsOwnerNameAppNameReleasesReleaseIdPatchRequestbodyContentApplicationJsonSchema
};
exports.publishedOnly = {
    parameterPath: ["options", "publishedOnly"],
    mapper: {
        serializedName: "published_only",
        type: {
            name: "Boolean"
        }
    }
};
exports.scope = {
    parameterPath: ["options", "scope"],
    mapper: {
        serializedName: "scope",
        type: {
            name: "String"
        }
    }
};
exports.app = {
    parameterPath: "app",
    mapper: mappers_1.PathsDf5UdfV01OrgsOrgNameAppsPostRequestbodyContentApplicationJsonSchema
};
exports.permissions1 = {
    parameterPath: "permissions",
    mapper: mappers_1.PathsG6C5PhV01AppsOwnerNameAppNameUsersUserEmailPatchRequestbodyContentApplicationJsonSchema
};
exports.destinationOwnerName = {
    parameterPath: "destinationOwnerName",
    mapper: {
        serializedName: "destination_owner_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/x-www-form-urlencoded",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.avatar = {
    parameterPath: ["options", "avatar"],
    mapper: {
        serializedName: "avatar",
        type: {
            name: "Stream"
        }
    }
};
exports.accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.app1 = {
    parameterPath: ["options", "app"],
    mapper: mappers_1.PathsMhqbvhV01AppsOwnerNameAppNamePatchRequestbodyContentApplicationJsonSchema
};
exports.app2 = {
    parameterPath: "app",
    mapper: mappers_1.Paths1XqwatgV01AppsPostRequestbodyContentApplicationJsonSchema
};
exports.orderBy = {
    parameterPath: ["options", "orderBy"],
    mapper: {
        serializedName: "$orderBy",
        type: {
            name: "String"
        }
    }
};
exports.appsLimit = {
    parameterPath: ["options", "appsLimit"],
    mapper: {
        serializedName: "apps_limit",
        type: {
            name: "Number"
        }
    }
};
exports.userEmails = {
    parameterPath: ["options", "userEmails"],
    mapper: mappers_1.Paths3EixoV01OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchema
};
exports.userEmails1 = {
    parameterPath: ["options", "userEmails"],
    mapper: mappers_1.Paths10EomnwV01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchema
};
exports.userEmails2 = {
    parameterPath: ["options", "userEmails"],
    mapper: mappers_1.PathsSmhj37V01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchema
};
exports.apps1 = {
    parameterPath: ["options", "apps"],
    mapper: mappers_1.PathsMs4QhdV01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsBulkDeletePostRequestbodyContentApplicationJsonSchema
};
exports.apps3 = {
    parameterPath: ["options", "apps"],
    mapper: mappers_1.PathsIy66N7V01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsPostRequestbodyContentApplicationJsonSchema
};
exports.name = {
    parameterPath: ["options", "name"],
    mapper: mappers_1.Paths6RaacuV01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchema
};
exports.isPublic = {
    parameterPath: ["options", "isPublic"],
    mapper: mappers_1.Paths6RaacuV01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchema
};
exports.name1 = {
    parameterPath: "name",
    mapper: mappers_1.Paths150Qpz7V01OrgsOrgNameDistributionGroupsPostRequestbodyContentApplicationJsonSchema
};
exports.displayName1 = {
    parameterPath: ["options", "displayName"],
    mapper: mappers_1.Paths150Qpz7V01OrgsOrgNameDistributionGroupsPostRequestbodyContentApplicationJsonSchema
};
exports.userEmails3 = {
    parameterPath: ["options", "userEmails"],
    mapper: mappers_1.Paths1C26JzV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchema
};
exports.userEmails4 = {
    parameterPath: ["options", "userEmails"],
    mapper: mappers_1.PathsLx7ZdvV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchema
};
exports.excludePendingInvitations = {
    parameterPath: ["options", "excludePendingInvitations"],
    mapper: {
        serializedName: "exclude_pending_invitations",
        type: {
            name: "Boolean"
        }
    }
};
exports.userEmails5 = {
    parameterPath: ["options", "userEmails"],
    mapper: mappers_1.Paths9330UyV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchema
};
exports.name2 = {
    parameterPath: ["options", "name"],
    mapper: mappers_1.Paths1Y98SmdV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchema
};
exports.isPublic1 = {
    parameterPath: ["options", "isPublic"],
    mapper: mappers_1.Paths1Y98SmdV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchema
};
exports.name3 = {
    parameterPath: "name",
    mapper: mappers_1.PathsFdbuo5V01AppsOwnerNameAppNameDistributionGroupsPostRequestbodyContentApplicationJsonSchema
};
exports.displayName2 = {
    parameterPath: ["options", "displayName"],
    mapper: mappers_1.PathsFdbuo5V01AppsOwnerNameAppNameDistributionGroupsPostRequestbodyContentApplicationJsonSchema
};
exports.teamName = {
    parameterPath: "teamName",
    mapper: {
        serializedName: "team_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.userEmail8 = {
    parameterPath: "userEmail",
    mapper: mappers_1.Paths1Cc9FkbV01OrgsOrgNameTeamsTeamNameUsersPostRequestbodyContentApplicationJsonSchema
};
exports.permissions2 = {
    parameterPath: "permissions",
    mapper: mappers_1.Paths1HiscesV01OrgsOrgNameTeamsTeamNameAppsAppNamePatchRequestbodyContentApplicationJsonSchema
};
exports.name4 = {
    parameterPath: "name",
    mapper: mappers_1.Paths3K4Kv5V01OrgsOrgNameTeamsTeamNameAppsPostRequestbodyContentApplicationJsonSchema
};
exports.displayName3 = {
    parameterPath: "displayName",
    mapper: mappers_1.Paths1414Qm7V01OrgsOrgNameTeamsTeamNamePatchRequestbodyContentApplicationJsonSchema
};
exports.displayName4 = {
    parameterPath: "displayName",
    mapper: mappers_1.Paths1Iu7UzV01OrgsOrgNameTeamsPostRequestbodyContentApplicationJsonSchema
};
exports.name5 = {
    parameterPath: ["options", "name"],
    mapper: mappers_1.Paths1Iu7UzV01OrgsOrgNameTeamsPostRequestbodyContentApplicationJsonSchema
};
exports.description = {
    parameterPath: ["options", "description"],
    mapper: mappers_1.Paths1Iu7UzV01OrgsOrgNameTeamsPostRequestbodyContentApplicationJsonSchema
};
exports.azureSubscriptionId = {
    parameterPath: "azureSubscriptionId",
    mapper: {
        serializedName: "azure_subscription_id",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: mappers_1.Paths11GzlnuV01AppsOwnerNameAppNameAzureSubscriptionsPostRequestbodyContentApplicationJsonSchema
};
exports.displayName5 = {
    parameterPath: ["options", "displayName"],
    mapper: mappers_1.Paths600DxeV01OrgsOrgNamePatchRequestbodyContentApplicationJsonSchema
};
exports.name6 = {
    parameterPath: ["options", "name"],
    mapper: mappers_1.Paths600DxeV01OrgsOrgNamePatchRequestbodyContentApplicationJsonSchema
};
exports.displayName6 = {
    parameterPath: ["options", "displayName"],
    mapper: mappers_1.Paths184FzfwV01OrgsPostRequestbodyContentApplicationJsonSchema
};
exports.name7 = {
    parameterPath: ["options", "name"],
    mapper: mappers_1.Paths184FzfwV01OrgsPostRequestbodyContentApplicationJsonSchema
};
exports.orgName1 = {
    parameterPath: "orgName",
    mapper: {
        serializedName: "orgName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.service = {
    parameterPath: ["options", "service"],
    mapper: {
        serializedName: "service",
        type: {
            name: "String"
        }
    }
};
exports.period = {
    parameterPath: ["options", "period"],
    mapper: {
        serializedName: "period",
        type: {
            name: "String"
        }
    }
};
exports.showOriginalPlans = {
    parameterPath: ["options", "showOriginalPlans"],
    mapper: {
        serializedName: "showOriginalPlans",
        type: {
            name: "Boolean"
        }
    }
};
exports.service1 = {
    parameterPath: ["options", "service"],
    mapper: {
        serializedName: "service",
        type: {
            name: "String"
        }
    }
};
exports.period1 = {
    parameterPath: ["options", "period"],
    mapper: {
        serializedName: "period",
        type: {
            name: "String"
        }
    }
};
exports.service2 = {
    parameterPath: ["options", "service"],
    mapper: {
        serializedName: "service",
        type: {
            name: "String"
        }
    }
};
exports.period2 = {
    parameterPath: ["options", "period"],
    mapper: {
        serializedName: "period",
        type: {
            name: "String"
        }
    }
};
exports.deploymentKey = {
    parameterPath: ["options", "deploymentKey"],
    mapper: {
        serializedName: "deploymentKey",
        type: {
            name: "String"
        }
    }
};
exports.appVersion = {
    parameterPath: ["options", "appVersion"],
    mapper: {
        serializedName: "appVersion",
        type: {
            name: "String"
        }
    }
};
exports.packageHash = {
    parameterPath: ["options", "packageHash"],
    mapper: {
        serializedName: "packageHash",
        type: {
            name: "String"
        }
    }
};
exports.label = {
    parameterPath: ["options", "label"],
    mapper: {
        serializedName: "label",
        type: {
            name: "String"
        }
    }
};
exports.clientUniqueId = {
    parameterPath: ["options", "clientUniqueId"],
    mapper: {
        serializedName: "clientUniqueId",
        type: {
            name: "String"
        }
    }
};
exports.isCompanion = {
    parameterPath: ["options", "isCompanion"],
    mapper: {
        serializedName: "isCompanion",
        type: {
            name: "String"
        }
    }
};
exports.releaseMetadata = {
    parameterPath: "releaseMetadata",
    mapper: mappers_1.PathsPkpkpaV01LegacyReportstatusDownloadPostRequestbodyContentApplicationJsonSchema
};
exports.releaseMetadata1 = {
    parameterPath: "releaseMetadata",
    mapper: mappers_1.PathsIy9KlqV01LegacyReportstatusDeployPostRequestbodyContentApplicationJsonSchema
};
exports.tools = {
    parameterPath: ["options", "tools"],
    mapper: {
        serializedName: "tools",
        type: {
            name: "String"
        }
    }
};
exports.buildId = {
    parameterPath: "buildId",
    mapper: {
        constraints: {
            ExclusiveMinimum: 0
        },
        serializedName: "build_id",
        required: true,
        type: {
            name: "Number"
        }
    }
};
exports.downloadType = {
    parameterPath: "downloadType",
    mapper: {
        serializedName: "download_type",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.distributeInfo = {
    parameterPath: "distributeInfo",
    mapper: mappers_1.Paths1P28L53V01AppsOwnerNameAppNameBuildsBuildIdDistributePostRequestbodyContentApplicationJsonSchema
};
exports.status = {
    parameterPath: ["options", "status"],
    mapper: mappers_1.PathsFcn32WV01AppsOwnerNameAppNameBuildsBuildIdPatchRequestbodyContentApplicationJsonSchema
};
exports.branch = {
    parameterPath: "branch",
    mapper: {
        serializedName: "branch",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.os = {
    parameterPath: "os",
    mapper: {
        serializedName: "os",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.platform = {
    parameterPath: "platform",
    mapper: {
        serializedName: "platform",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.maxSearchDepth = {
    parameterPath: ["options", "maxSearchDepth"],
    mapper: {
        constraints: {
            InclusiveMaximum: 10,
            InclusiveMinimum: 1
        },
        serializedName: "maxSearchDepth",
        type: {
            name: "Number"
        }
    }
};
exports.sourceVersion = {
    parameterPath: ["options", "sourceVersion"],
    mapper: mappers_1.Paths1Jgsne9V01AppsOwnerNameAppNameBranchesBranchBuildsPostRequestbodyContentApplicationJsonSchema
};
exports.debug = {
    parameterPath: ["options", "debug"],
    mapper: mappers_1.Paths1Jgsne9V01AppsOwnerNameAppNameBranchesBranchBuildsPostRequestbodyContentApplicationJsonSchema
};
exports.crashId = {
    parameterPath: "crashId",
    mapper: {
        serializedName: "crash_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.date = {
    parameterPath: ["options", "date"],
    mapper: {
        serializedName: "date",
        type: {
            name: "DateTime"
        }
    }
};
exports.attachmentId = {
    parameterPath: "attachmentId",
    mapper: {
        serializedName: "attachment_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.crashGroupId = {
    parameterPath: "crashGroupId",
    mapper: {
        serializedName: "crash_group_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.groupingOnly = {
    parameterPath: ["options", "groupingOnly"],
    mapper: {
        defaultValue: false,
        serializedName: "grouping_only",
        type: {
            name: "Boolean"
        }
    }
};
exports.includeReport = {
    parameterPath: ["options", "includeReport"],
    mapper: {
        defaultValue: false,
        serializedName: "include_report",
        type: {
            name: "Boolean"
        }
    }
};
exports.includeLog = {
    parameterPath: ["options", "includeLog"],
    mapper: {
        defaultValue: false,
        serializedName: "include_log",
        type: {
            name: "Boolean"
        }
    }
};
exports.includeDetails = {
    parameterPath: ["options", "includeDetails"],
    mapper: {
        defaultValue: false,
        serializedName: "include_details",
        type: {
            name: "Boolean"
        }
    }
};
exports.includeStacktrace = {
    parameterPath: ["options", "includeStacktrace"],
    mapper: {
        defaultValue: false,
        serializedName: "include_stacktrace",
        type: {
            name: "Boolean"
        }
    }
};
exports.retentionDelete = {
    parameterPath: ["options", "retentionDelete"],
    mapper: {
        defaultValue: false,
        serializedName: "retention_delete",
        type: {
            name: "Boolean"
        }
    }
};
exports.dateFrom = {
    parameterPath: ["options", "dateFrom"],
    mapper: {
        serializedName: "date_from",
        type: {
            name: "DateTime"
        }
    }
};
exports.dateTo = {
    parameterPath: ["options", "dateTo"],
    mapper: {
        serializedName: "date_to",
        type: {
            name: "DateTime"
        }
    }
};
exports.appVersion1 = {
    parameterPath: ["options", "appVersion"],
    mapper: {
        serializedName: "app_version",
        type: {
            name: "String"
        }
    }
};
exports.errorType = {
    parameterPath: ["options", "errorType"],
    mapper: {
        serializedName: "error_type",
        type: {
            name: "String"
        }
    }
};
exports.id2 = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
exports.devices = {
    parameterPath: "devices",
    mapper: mappers_1.DeviceSetUpdateInformation
};
exports.name8 = {
    parameterPath: "name",
    mapper: mappers_1.DeviceSetUpdateInformation
};
exports.devices1 = {
    parameterPath: "devices",
    mapper: mappers_1.DeviceSetUpdateInformation0
};
exports.name9 = {
    parameterPath: "name",
    mapper: mappers_1.DeviceSetUpdateInformation0
};
exports.testSeriesSlug = {
    parameterPath: "testSeriesSlug",
    mapper: {
        serializedName: "test_series_slug",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.name11 = {
    parameterPath: "name",
    mapper: mappers_1.NameOfTheTestSeries
};
exports.query = {
    parameterPath: ["options", "query"],
    mapper: {
        serializedName: "query",
        type: {
            name: "String"
        }
    }
};
exports.name12 = {
    parameterPath: "name",
    mapper: mappers_1.NameOfTheTestSeries0
};
exports.testRunId = {
    parameterPath: "testRunId",
    mapper: {
        serializedName: "test_run_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.startOptions = {
    parameterPath: "startOptions",
    mapper: mappers_1.TestCloudStartTestRunOptions
};
exports.testRunId1 = {
    parameterPath: "testRunId",
    mapper: {
        serializedName: "test_run_id",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
exports.fileInfo = {
    parameterPath: "fileInfo",
    mapper: {
        serializedName: "fileInfo",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "PostContentSchemaItem"
                }
            }
        }
    }
};
exports.fileInfo1 = {
    parameterPath: "fileInfo",
    mapper: mappers_1.TestCloudFileHash
};
exports.devices2 = {
    parameterPath: "devices",
    mapper: mappers_1.DeviceSetUpdateInformation1
};
exports.name13 = {
    parameterPath: "name",
    mapper: mappers_1.DeviceSetUpdateInformation1
};
exports.devices3 = {
    parameterPath: "devices",
    mapper: mappers_1.DeviceSetUpdateInformation2
};
exports.name14 = {
    parameterPath: "name",
    mapper: mappers_1.DeviceSetUpdateInformation2
};
exports.devices4 = {
    parameterPath: "devices",
    mapper: mappers_1.DeviceList
};
exports.appUploadId = {
    parameterPath: ["options", "appUploadId"],
    mapper: {
        serializedName: "app_upload_id",
        type: {
            name: "Uuid"
        }
    }
};
exports.symbolId = {
    parameterPath: "symbolId",
    mapper: {
        serializedName: "symbol_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.symbolUploadId = {
    parameterPath: "symbolUploadId",
    mapper: {
        serializedName: "symbol_upload_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.status1 = {
    parameterPath: "status",
    mapper: mappers_1.PathsQse2V9V01AppsOwnerNameAppNameSymbolUploadsSymbolUploadIdPatchRequestbodyContentApplicationJsonSchema
};
exports.top = {
    parameterPath: ["options", "top"],
    mapper: {
        defaultValue: 30,
        constraints: {
            InclusiveMaximum: 100,
            InclusiveMinimum: 1
        },
        serializedName: "top",
        type: {
            name: "Number"
        }
    }
};
exports.status2 = {
    parameterPath: ["options", "status"],
    mapper: {
        serializedName: "status",
        type: {
            name: "String"
        }
    }
};
exports.symbolType = {
    parameterPath: ["options", "symbolType"],
    mapper: {
        serializedName: "symbol_type",
        type: {
            name: "String"
        }
    }
};
exports.body7 = {
    parameterPath: "body",
    mapper: mappers_1.Paths18RbyikV01AppsOwnerNameAppNameSymbolUploadsPostRequestbodyContentApplicationJsonSchema
};
exports.sourceHost = {
    parameterPath: "sourceHost",
    mapper: {
        serializedName: "source_host",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.vstsAccountName = {
    parameterPath: ["options", "vstsAccountName"],
    mapper: {
        serializedName: "vstsAccountName",
        type: {
            name: "String"
        }
    }
};
exports.vstsProjectId = {
    parameterPath: ["options", "vstsProjectId"],
    mapper: {
        serializedName: "vstsProjectId",
        type: {
            name: "String"
        }
    }
};
exports.serviceConnectionId = {
    parameterPath: ["options", "serviceConnectionId"],
    mapper: {
        serializedName: "service_connection_id",
        type: {
            name: "String"
        }
    }
};
exports.form = {
    parameterPath: ["options", "form"],
    mapper: {
        serializedName: "form",
        type: {
            name: "String"
        }
    }
};
exports.includeInactive = {
    parameterPath: ["options", "includeInactive"],
    mapper: {
        serializedName: "includeInactive",
        type: {
            name: "Boolean"
        }
    }
};
exports.repo = {
    parameterPath: "repo",
    mapper: mappers_1.Paths1P54ZxdV01AppsOwnerNameAppNameRepoConfigPostRequestbodyContentApplicationJsonSchema
};
exports.properties1 = {
    parameterPath: "properties",
    mapper: mappers_1.Paths1Nw7A47V01AppsOwnerNameAppNamePushNotificationsConfigPutRequestbodyContentApplicationJsonSchema
};
exports.notificationId = {
    parameterPath: "notificationId",
    mapper: {
        serializedName: "notification_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.top1 = {
    parameterPath: ["options", "top"],
    mapper: {
        defaultValue: 30,
        constraints: {
            InclusiveMaximum: 2000,
            InclusiveMinimum: 0
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
exports.skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
exports.orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        defaultValue: "count desc",
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
exports.inlinecount = {
    parameterPath: ["options", "inlinecount"],
    mapper: {
        defaultValue: "none",
        serializedName: "$inlinecount",
        type: {
            name: "String"
        }
    }
};
exports.includeArchived = {
    parameterPath: ["options", "includeArchived"],
    mapper: {
        serializedName: "include_archived",
        type: {
            name: "Boolean"
        }
    }
};
exports.notificationTarget = {
    parameterPath: ["options", "notificationTarget"],
    mapper: mappers_1.Paths13Dzhd2V01AppsOwnerNameAppNamePushNotificationsPostRequestbodyContentApplicationJsonSchema
};
exports.notificationContent = {
    parameterPath: "notificationContent",
    mapper: mappers_1.Paths13Dzhd2V01AppsOwnerNameAppNamePushNotificationsPostRequestbodyContentApplicationJsonSchema
};
exports.values = {
    parameterPath: "values",
    mapper: mappers_1.Paths5M7Cf2V01AppsOwnerNameAppNamePushNotificationsDeleteRequestbodyContentApplicationJsonSchema
};
exports.exportId = {
    parameterPath: "exportId",
    mapper: {
        serializedName: "export_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.blobContainerSasUri = {
    parameterPath: "blobContainerSasUri",
    mapper: mappers_1.Paths1H0K4SgV01AppsOwnerNameAppNamePushDeviceExportsPostRequestbodyContentApplicationJsonSchema
};
exports.payload = {
    parameterPath: ["options", "payload"],
    mapper: {
        serializedName: "payload",
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
        }
    }
};
exports.exportConfigurationId = {
    parameterPath: "exportConfigurationId",
    mapper: {
        serializedName: "export_configuration_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.properties4 = {
    parameterPath: "properties",
    mapper: mappers_1.PathsEhcfgaV01AppsOwnerNameAppNameExportConfigurationsExportConfigurationIdPatchRequestbodyContentApplicationJsonSchema
};
exports.properties5 = {
    parameterPath: "properties",
    mapper: mappers_1.Paths1QllskkV01AppsOwnerNameAppNameExportConfigurationsPostRequestbodyContentApplicationJsonSchema
};
exports.errorId = {
    parameterPath: "errorId",
    mapper: {
        serializedName: "errorId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.attachmentId1 = {
    parameterPath: "attachmentId",
    mapper: {
        serializedName: "attachmentId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "filter",
        type: {
            name: "String"
        }
    }
};
exports.q = {
    parameterPath: ["options", "q"],
    mapper: {
        serializedName: "q",
        type: {
            name: "String"
        }
    }
};
exports.order = {
    parameterPath: ["options", "order"],
    mapper: {
        defaultValue: "desc",
        serializedName: "order",
        type: {
            name: "String"
        }
    }
};
exports.sort = {
    parameterPath: ["options", "sort"],
    mapper: {
        defaultValue: "timestamp",
        serializedName: "sort",
        type: {
            name: "String"
        }
    }
};
exports.top2 = {
    parameterPath: ["options", "top"],
    mapper: {
        defaultValue: 100,
        constraints: {
            InclusiveMaximum: 100,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
exports.skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        defaultValue: 0,
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
exports.retentionInDays = {
    parameterPath: "retentionInDays",
    mapper: mappers_1.Paths1V83InnV01AppsOwnerNameAppNameErrorsRetentionSettingsPutRequestbodyContentApplicationJsonSchema
};
exports.start = {
    parameterPath: "start",
    mapper: {
        serializedName: "start",
        required: true,
        type: {
            name: "DateTime"
        }
    }
};
exports.end = {
    parameterPath: ["options", "end"],
    mapper: {
        serializedName: "end",
        type: {
            name: "DateTime"
        }
    }
};
exports.versions = {
    parameterPath: ["options", "versions"],
    mapper: {
        serializedName: "versions",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "Pipes"
};
exports.appBuild = {
    parameterPath: ["options", "appBuild"],
    mapper: {
        serializedName: "app_build",
        type: {
            name: "String"
        }
    }
};
exports.errorType1 = {
    parameterPath: ["options", "errorType"],
    mapper: {
        serializedName: "errorType",
        type: {
            name: "String"
        }
    }
};
exports.errorGroupId = {
    parameterPath: "errorGroupId",
    mapper: {
        serializedName: "errorGroupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.format = {
    parameterPath: ["options", "format"],
    mapper: {
        serializedName: "format",
        type: {
            name: "String"
        }
    }
};
exports.model = {
    parameterPath: ["options", "model"],
    mapper: {
        serializedName: "model",
        type: {
            name: "String"
        }
    }
};
exports.os1 = {
    parameterPath: ["options", "os"],
    mapper: {
        serializedName: "os",
        type: {
            name: "String"
        }
    }
};
exports.version = {
    parameterPath: ["options", "version"],
    mapper: {
        serializedName: "version",
        type: {
            name: "String"
        }
    }
};
exports.state = {
    parameterPath: "state",
    mapper: mappers_1.PathsHpm6KuV01AppsOwnerNameAppNameErrorsErrorgroupsErrorgroupidPatchRequestbodyContentApplicationJsonSchema
};
exports.annotation = {
    parameterPath: ["options", "annotation"],
    mapper: mappers_1.PathsHpm6KuV01AppsOwnerNameAppNameErrorsErrorgroupsErrorgroupidPatchRequestbodyContentApplicationJsonSchema
};
exports.order1 = {
    parameterPath: ["options", "order"],
    mapper: {
        defaultValue: "desc",
        serializedName: "order",
        type: {
            name: "String"
        }
    }
};
exports.sort1 = {
    parameterPath: ["options", "sort"],
    mapper: {
        defaultValue: "matchingReportsCount",
        serializedName: "sort",
        type: {
            name: "String"
        }
    }
};
exports.groupState = {
    parameterPath: ["options", "groupState"],
    mapper: {
        serializedName: "groupState",
        type: {
            name: "String"
        }
    }
};
exports.errorType2 = {
    parameterPath: ["options", "errorType"],
    mapper: {
        serializedName: "errorType",
        type: {
            name: "String"
        }
    }
};
exports.errorType3 = {
    parameterPath: ["options", "errorType"],
    mapper: {
        serializedName: "errorType",
        type: {
            name: "String"
        }
    }
};
exports.filter1 = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
exports.inlinecount1 = {
    parameterPath: ["options", "inlinecount"],
    mapper: {
        defaultValue: "none",
        serializedName: "$inlinecount",
        type: {
            name: "String"
        }
    }
};
exports.errorType4 = {
    parameterPath: ["options", "errorType"],
    mapper: {
        serializedName: "errorType",
        type: {
            name: "String"
        }
    }
};
exports.version1 = {
    parameterPath: "version",
    mapper: {
        serializedName: "version",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.errorType5 = {
    parameterPath: ["options", "errorType"],
    mapper: {
        serializedName: "errorType",
        type: {
            name: "String"
        }
    }
};
exports.storeName = {
    parameterPath: "storeName",
    mapper: {
        serializedName: "store_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.releaseId3 = {
    parameterPath: "releaseId",
    mapper: {
        serializedName: "release_id",
        required: true,
        type: {
            name: "Number"
        }
    }
};
exports.body8 = {
    parameterPath: ["options", "body"],
    mapper: {
        serializedName: "body",
        type: {
            name: "String"
        }
    }
};
exports.serviceConnectionId1 = {
    parameterPath: "serviceConnectionId",
    mapper: mappers_1.Paths1Yf5Jp5V01AppsOwnerNameAppNameDistributionStoresStoreNamePatchRequestbodyContentApplicationJsonSchema
};
exports.body10 = {
    parameterPath: "body",
    mapper: mappers_1.PathsPwsnpuV01AppsOwnerNameAppNameDistributionStoresPostRequestbodyContentApplicationJsonSchema
};
exports.symbolGroupId = {
    parameterPath: "symbolGroupId",
    mapper: {
        serializedName: "symbol_group_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.top3 = {
    parameterPath: "top",
    mapper: {
        serializedName: "top",
        required: true,
        type: {
            name: "Number"
        }
    }
};
exports.label1 = {
    parameterPath: ["options", "label"],
    mapper: mappers_1.Paths1G1PzhgV01AppsOwnerNameAppNameDeploymentsDeploymentNameRollbackReleasePostRequestbodyContentApplicationJsonSchema
};
exports.release = {
    parameterPath: "release",
    mapper: mappers_1.PathsZjw2F1V01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesReleaseLabelPatchRequestbodyContentApplicationJsonSchema
};
exports.releaseLabel1 = {
    parameterPath: "releaseLabel",
    mapper: {
        serializedName: "release_label",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.uploadedRelease = {
    parameterPath: "uploadedRelease",
    mapper: mappers_1.Paths1Q5DgwjV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostRequestbodyContentApplicationJsonSchema
};
exports.release1 = {
    parameterPath: ["options", "release"],
    mapper: mappers_1.PathsOn7Se0V01AppsOwnerNameAppNameDeploymentsDeploymentNamePromoteReleasePromoteDeploymentNamePostRequestbodyContentApplicationJsonSchema
};
exports.promoteDeploymentName = {
    parameterPath: "promoteDeploymentName",
    mapper: {
        serializedName: "promote_deployment_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.body11 = {
    parameterPath: ["options", "body"],
    mapper: {
        serializedName: "body",
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
        }
    }
};
exports.name15 = {
    parameterPath: "name",
    mapper: mappers_1.PathsUaqn8EV01AppsOwnerNameAppNameDeploymentsDeploymentNamePatchRequestbodyContentApplicationJsonSchema
};
exports.key = {
    parameterPath: ["options", "key"],
    mapper: mappers_1.Paths1Fgvm7MV01AppsOwnerNameAppNameDeploymentsPostRequestbodyContentApplicationJsonSchema
};
exports.name16 = {
    parameterPath: "name",
    mapper: mappers_1.Paths1Fgvm7MV01AppsOwnerNameAppNameDeploymentsPostRequestbodyContentApplicationJsonSchema
};
exports.latestRelease = {
    parameterPath: ["options", "latestRelease"],
    mapper: mappers_1.Paths1Fgvm7MV01AppsOwnerNameAppNameDeploymentsPostRequestbodyContentApplicationJsonSchema
};
exports.provisionDatabaseParameters = {
    parameterPath: ["options", "provisionDatabaseParameters"],
    mapper: mappers_1.PathsA5R1LbV01AppsOwnerNameAppNameDataResourceProvisioningPostRequestbodyContentApplicationJsonSchema
};
exports.aCAuthorizationARM = {
    parameterPath: "aCAuthorizationARM",
    mapper: {
        serializedName: "AC-Authorization-ARM",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.accountName = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            MaxLength: 31,
            MinLength: 3
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.status3 = {
    parameterPath: ["options", "status"],
    mapper: mappers_1.PathsT60UxpV01AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchRequestbodyContentApplicationJsonSchema
};
exports.annotation1 = {
    parameterPath: ["options", "annotation"],
    mapper: mappers_1.PathsT60UxpV01AppsOwnerNameAppNameCrashGroupsCrashGroupIdPatchRequestbodyContentApplicationJsonSchema
};
exports.lastOccurrenceFrom = {
    parameterPath: ["options", "lastOccurrenceFrom"],
    mapper: {
        serializedName: "last_occurrence_from",
        type: {
            name: "DateTime"
        }
    }
};
exports.lastOccurrenceTo = {
    parameterPath: ["options", "lastOccurrenceTo"],
    mapper: {
        serializedName: "last_occurrence_to",
        type: {
            name: "DateTime"
        }
    }
};
exports.groupType = {
    parameterPath: ["options", "groupType"],
    mapper: {
        serializedName: "group_type",
        type: {
            name: "String"
        }
    }
};
exports.groupStatus = {
    parameterPath: ["options", "groupStatus"],
    mapper: {
        serializedName: "group_status",
        type: {
            name: "String"
        }
    }
};
exports.groupTextSearch = {
    parameterPath: ["options", "groupTextSearch"],
    mapper: {
        serializedName: "group_text_search",
        type: {
            name: "String"
        }
    }
};
exports.orderby1 = {
    parameterPath: ["options", "orderby"],
    mapper: {
        defaultValue: "last_occurrence desc",
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
exports.continuationToken = {
    parameterPath: ["options", "continuationToken"],
    mapper: {
        serializedName: "continuation_token",
        type: {
            name: "String"
        }
    }
};
exports.hashes = {
    parameterPath: "hashes",
    mapper: {
        serializedName: "hashes",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
exports.params1 = {
    parameterPath: "params",
    mapper: mappers_1.PathsXn26H7V01AppsOwnerNameAppNameBranchesBranchConfigPostRequestbodyContentApplicationJsonSchema
};
exports.params2 = {
    parameterPath: "params",
    mapper: mappers_1.Paths1O0K3JpV01AppsOwnerNameAppNameBranchesBranchConfigPutRequestbodyContentApplicationJsonSchema
};
exports.aCAuthorizationAADGraph = {
    parameterPath: ["options", "aCAuthorizationAADGraph"],
    mapper: {
        serializedName: "AC-Authorization-AAD-Graph",
        type: {
            name: "String"
        }
    }
};
exports.searchTerm = {
    parameterPath: ["options", "searchTerm"],
    mapper: {
        serializedName: "searchTerm",
        type: {
            name: "String"
        }
    }
};
exports.body12 = {
    parameterPath: "body",
    mapper: mappers_1.Paths1B7RevxV01AppsOwnerNameAppNameAppleMappingPostRequestbodyContentApplicationJsonSchema
};
exports.apiTokenId = {
    parameterPath: "apiTokenId",
    mapper: {
        serializedName: "api_token_id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.description2 = {
    parameterPath: ["options", "description"],
    mapper: mappers_1.PathsUuian4V01AppsOwnerNameAppNameApiTokensPostRequestbodyContentApplicationJsonSchema
};
exports.scope1 = {
    parameterPath: ["options", "scope"],
    mapper: mappers_1.PathsUuian4V01AppsOwnerNameAppNameApiTokensPostRequestbodyContentApplicationJsonSchema
};
exports.interval = {
    parameterPath: "interval",
    mapper: {
        serializedName: "interval",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.start1 = {
    parameterPath: ["options", "start"],
    mapper: {
        serializedName: "start",
        type: {
            name: "DateTime"
        }
    }
};
exports.eventName = {
    parameterPath: "eventName",
    mapper: {
        serializedName: "event_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.eventPropertyName = {
    parameterPath: "eventPropertyName",
    mapper: {
        serializedName: "event_property_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.top4 = {
    parameterPath: ["options", "top"],
    mapper: {
        defaultValue: 10,
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
exports.eventName1 = {
    parameterPath: ["options", "eventName"],
    mapper: {
        serializedName: "event_name",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "Pipes"
};
exports.inlinecount2 = {
    parameterPath: ["options", "inlinecount"],
    mapper: {
        defaultValue: "none",
        serializedName: "$inlinecount",
        type: {
            name: "String"
        }
    }
};
exports.releases1 = {
    parameterPath: "releases",
    mapper: mappers_1.Paths1Pzxl78V01AppsOwnerNameAppNameAnalyticsDistributionReleaseCountsPostRequestbodyContentApplicationJsonSchema
};
exports.crashGroups1 = {
    parameterPath: "crashGroups",
    mapper: mappers_1.PathsDc3Tj4V01AppsOwnerNameAppNameAnalyticsCrashGroupsPostRequestbodyContentApplicationJsonSchema
};
exports.audienceName = {
    parameterPath: "audienceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("[^/]+"),
            MaxLength: 64
        },
        serializedName: "audience_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.audience = {
    parameterPath: "audience",
    mapper: mappers_1.Paths2Mes8QV01AppsOwnerNameAppNameAnalyticsAudiencesAudienceNamePutRequestbodyContentApplicationJsonSchema
};
exports.propertyName = {
    parameterPath: "propertyName",
    mapper: {
        serializedName: "property_name",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.contains = {
    parameterPath: ["options", "contains"],
    mapper: {
        serializedName: "contains",
        type: {
            name: "String"
        }
    }
};
exports.audience1 = {
    parameterPath: "audience",
    mapper: mappers_1.Paths16F7ScgV01AppsOwnerNameAppNameAnalyticsAudiencesDefinitionTestPostRequestbodyContentApplicationJsonSchema
};
exports.includeDisabled = {
    parameterPath: ["options", "includeDisabled"],
    mapper: {
        serializedName: "include_disabled",
        type: {
            name: "Boolean"
        }
    }
};
exports.appBuild1 = {
    parameterPath: "appBuild",
    mapper: {
        serializedName: "app_build",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.description4 = {
    parameterPath: ["options", "description"],
    mapper: mappers_1.Paths163K2XcV01ApiTokensPostRequestbodyContentApplicationJsonSchema
};
exports.scope2 = {
    parameterPath: ["options", "scope"],
    mapper: mappers_1.Paths163K2XcV01ApiTokensPostRequestbodyContentApplicationJsonSchema
};
