"use strict";
/*
 * Copyright (c) MappDL Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by MappDL (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestImpl = void 0;
const coreClient = require("@azure/core-client");
const Mappers = require("../models/mappers");
const Parameters = require("../models/parameters");
/** Class containing Test operations. */
class TestImpl {
    /**
     * Initialize a new instance of the class Test class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a device set belonging to the user
     * @param id The UUID of the device set
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getDeviceSetOfUser(id, ownerName, appName, options) {
        return this.client.sendOperationRequest({ id, ownerName, appName, options }, getDeviceSetOfUserOperationSpec);
    }
    /**
     * Updates a device set belonging to the user
     * @param id The UUID of the device set
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param devices List of device IDs
     * @param name The name of the device set
     * @param options The options parameters.
     */
    updateDeviceSetOfUser(id, ownerName, appName, devices, name, options) {
        return this.client.sendOperationRequest({ id, ownerName, appName, devices, name, options }, updateDeviceSetOfUserOperationSpec);
    }
    /**
     * Deletes a device set belonging to the user
     * @param id The UUID of the device set
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    deleteDeviceSetOfUser(id, ownerName, appName, options) {
        return this.client.sendOperationRequest({ id, ownerName, appName, options }, deleteDeviceSetOfUserOperationSpec);
    }
    /**
     * Lists device sets belonging to the user
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    listDeviceSetsOfUser(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, listDeviceSetsOfUserOperationSpec);
    }
    /**
     * Creates a device set belonging to the user
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param devices List of device IDs
     * @param name The name of the device set
     * @param options The options parameters.
     */
    createDeviceSetOfUser(ownerName, appName, devices, name, options) {
        return this.client.sendOperationRequest({ ownerName, appName, devices, name, options }, createDeviceSetOfUserOperationSpec);
    }
    /**
     * Returns list of all test runs for a given test series
     * @param testSeriesSlug The slug of the test series
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getAllTestRunsForSeries(testSeriesSlug, ownerName, appName, options) {
        return this.client.sendOperationRequest({ testSeriesSlug, ownerName, appName, options }, getAllTestRunsForSeriesOperationSpec);
    }
    /**
     * Deletes a single test series
     * @param testSeriesSlug The slug of the test series
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    deleteTestSeries(testSeriesSlug, ownerName, appName, options) {
        return this.client.sendOperationRequest({ testSeriesSlug, ownerName, appName, options }, deleteTestSeriesOperationSpec);
    }
    /**
     * Updates name and slug of a test series
     * @param testSeriesSlug The slug of the test series
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param name Name of the new test series
     * @param options The options parameters.
     */
    patchTestSeries(testSeriesSlug, ownerName, appName, name, options) {
        return this.client.sendOperationRequest({ testSeriesSlug, ownerName, appName, name, options }, patchTestSeriesOperationSpec);
    }
    /**
     * Returns list of all test series for an application
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getAllTestSeries(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, getAllTestSeriesOperationSpec);
    }
    /**
     * Creates new test series for an application
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param name Name of the new test series
     * @param options The options parameters.
     */
    createTestSeries(ownerName, appName, name, options) {
        return this.client.sendOperationRequest({ ownerName, appName, name, options }, createTestSeriesOperationSpec);
    }
    /**
     * Stop a test run execution
     * @param testRunId The ID of the test run to be stopped
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    stopTestRun(testRunId, ownerName, appName, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, options }, stopTestRunOperationSpec);
    }
    /**
     * Gets state of the test run
     * @param testRunId The ID of the test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getTestRunState(testRunId, ownerName, appName, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, options }, getTestRunStateOperationSpec);
    }
    /**
     * Starts test run
     * @param testRunId The ID of the test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param startOptions Option required to start the test run
     * @param options The options parameters.
     */
    startTestRun(testRunId, ownerName, appName, startOptions, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, startOptions, options }, startTestRunOperationSpec);
    }
    /**
     * Returns a single test report
     * @param testRunId The ID of the test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getTestReport(testRunId, ownerName, appName, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, options }, getTestReportOperationSpec);
    }
    /**
     * Adds file with the given hash to a test run
     * @param testRunId The ID of the test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param fileInfo File hash information
     * @param options The options parameters.
     */
    uploadHashesBatch(testRunId, ownerName, appName, fileInfo, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, fileInfo, options }, uploadHashesBatchOperationSpec);
    }
    /**
     * Adds file with the given hash to a test run
     * @param testRunId The ID of the test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param fileInfo File hash information
     * @param options The options parameters.
     */
    uploadHash(testRunId, ownerName, appName, fileInfo, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, fileInfo, options }, uploadHashOperationSpec);
    }
    /**
     * Uploads file for a test run
     * @param testRunId The ID of the test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    startUploadingFile(testRunId, ownerName, appName, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, options }, startUploadingFileOperationSpec);
    }
    /**
     * Returns a single test runs
     * @param testRunId The ID of the test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getTestRun(testRunId, ownerName, appName, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, options }, getTestRunOperationSpec);
    }
    /**
     * Logically deletes a test run
     * @param testRunId The ID of the test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    archiveTestRun(testRunId, ownerName, appName, options) {
        return this.client.sendOperationRequest({ testRunId, ownerName, appName, options }, archiveTestRunOperationSpec);
    }
    /**
     * Returns a list of test runs
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getTestRuns(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, getTestRunsOperationSpec);
    }
    /**
     * Creates a new test run
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    createTestRun(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, createTestRunOperationSpec);
    }
    /**
     * Lists test run data
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    gdprExportTestRun(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, gdprExportTestRunOperationSpec);
    }
    /**
     * Lists pipeline test data
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    gdprExportPipelineTest(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, gdprExportPipelineTestOperationSpec);
    }
    /**
     * Lists hash file data
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    gdprExportHashFile(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, gdprExportHashFileOperationSpec);
    }
    /**
     * Lists file set file data
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    gdprExportFileSetFile(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, gdprExportFileSetFileOperationSpec);
    }
    /**
     * Lists app data
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    gdprExportApp(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, gdprExportAppOperationSpec);
    }
    /**
     * Lists all the endpoints available for Test apps data
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    gdprExportApps(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, gdprExportAppsOperationSpec);
    }
    /**
     * Get information about the currently active subscriptions, if any
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getSubscriptions(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, getSubscriptionsOperationSpec);
    }
    /**
     * Accept a free trial subscription
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    createSubscription(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, createSubscriptionOperationSpec);
    }
    /**
     * Gets a device set belonging to the owner
     * @param id The UUID of the device set
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getDeviceSetOfOwner(id, ownerName, appName, options) {
        return this.client.sendOperationRequest({ id, ownerName, appName, options }, getDeviceSetOfOwnerOperationSpec);
    }
    /**
     * Updates a device set belonging to the owner
     * @param id The UUID of the device set
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param devices List of device IDs
     * @param name The name of the device set
     * @param options The options parameters.
     */
    updateDeviceSetOfOwner(id, ownerName, appName, devices, name, options) {
        return this.client.sendOperationRequest({ id, ownerName, appName, devices, name, options }, updateDeviceSetOfOwnerOperationSpec);
    }
    /**
     * Deletes a device set belonging to the owner
     * @param id The UUID of the device set
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    deleteDeviceSetOfOwner(id, ownerName, appName, options) {
        return this.client.sendOperationRequest({ id, ownerName, appName, options }, deleteDeviceSetOfOwnerOperationSpec);
    }
    /**
     * Lists device sets belonging to the owner
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    listDeviceSetsOfOwner(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, listDeviceSetsOfOwnerOperationSpec);
    }
    /**
     * Creates a device set belonging to the owner
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param devices List of device IDs
     * @param name The name of the device set
     * @param options The options parameters.
     */
    createDeviceSetOfOwner(ownerName, appName, devices, name, options) {
        return this.client.sendOperationRequest({ ownerName, appName, devices, name, options }, createDeviceSetOfOwnerOperationSpec);
    }
    /**
     * Creates a short ID for a list of devices
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param devices Array of String
     * @param options The options parameters.
     */
    createDeviceSelection(ownerName, appName, devices, options) {
        return this.client.sendOperationRequest({ ownerName, appName, devices, options }, createDeviceSelectionOperationSpec);
    }
    /**
     * Returns a list of available devices
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    getDeviceConfigurations(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, getDeviceConfigurationsOperationSpec);
    }
    /**
     * Lists feature flag data
     * @param options The options parameters.
     */
    gdprExportFeatureFlag(options) {
        return this.client.sendOperationRequest({ options }, gdprExportFeatureFlagOperationSpec);
    }
    /**
     * Lists account data
     * @param options The options parameters.
     */
    gdprExportAccount(options) {
        return this.client.sendOperationRequest({ options }, gdprExportAccountOperationSpec);
    }
    /**
     * Lists all the endpoints available for Test accounts data
     * @param options The options parameters.
     */
    gdprExportAccounts(options) {
        return this.client.sendOperationRequest({ options }, gdprExportAccountsOperationSpec);
    }
}
exports.TestImpl = TestImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getDeviceSetOfUserOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeviceSet
        },
        404: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.id2
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateDeviceSetOfUserOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.DeviceSet0
        },
        400: {
            bodyMapper: Mappers.TestCloudErrorDetails
        },
        404: {}
    },
    requestBody: {
        parameterPath: { devices: ["devices"], name: ["name"] },
        mapper: Object.assign(Object.assign({}, Mappers.DeviceSetUpdateInformation), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.id2
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteDeviceSetOfUserOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}",
    httpMethod: "DELETE",
    responses: { 200: {}, 404: {} },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.id2
    ],
    serializer
};
const listDeviceSetsOfUserOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/user/device_sets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Paths17Qazt1V01AppsOwnerNameAppNameUserDeviceSetsGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const createDeviceSetOfUserOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/user/device_sets",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.DeviceSet1
        },
        400: {
            bodyMapper: Mappers.TestCloudErrorDetails0
        }
    },
    requestBody: {
        parameterPath: { devices: ["devices"], name: ["name"] },
        mapper: Object.assign(Object.assign({}, Mappers.DeviceSetUpdateInformation0), { required: true })
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const getAllTestRunsForSeriesOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsShbmt3V01AppsOwnerNameAppNameTestSeriesSlugTestRunsGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testSeriesSlug
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteTestSeriesOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}",
    httpMethod: "DELETE",
    responses: { 200: {}, 404: {} },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testSeriesSlug
    ],
    serializer
};
const patchTestSeriesOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.TestSeries
        },
        400: {},
        404: {}
    },
    requestBody: {
        parameterPath: { name: ["name"] },
        mapper: Object.assign(Object.assign({}, Mappers.NameOfTheTestSeries), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testSeriesSlug
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const getAllTestSeriesOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_series",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsAd8C7FV01AppsOwnerNameAppNameTestSeriesGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        }
    },
    queryParameters: [Parameters.query],
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const createTestSeriesOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_series",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.TestSeries0
        },
        400: {
            bodyMapper: Mappers.TestCloudErrorDetails1
        }
    },
    requestBody: {
        parameterPath: { name: ["name"] },
        mapper: Object.assign(Object.assign({}, Mappers.NameOfTheTestSeries0), { required: true })
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const stopTestRunOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.TestRun
        },
        404: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getTestRunStateOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TestRunState
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const startTestRunOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.TestCloudTestRunStartResult
        }
    },
    requestBody: Parameters.startOptions,
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const getTestReportOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PathsRj1AeoV01AppsOwnerNameAppNameTestRunsTestRunIdReportGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const uploadHashesBatchOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsH1EvszV01AppsOwnerNameAppNameTestRunsTestRunIdHashesBatchPostResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        }
    },
    requestBody: Parameters.fileInfo,
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const uploadHashOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes",
    httpMethod: "POST",
    responses: {
        201: {},
        401: {
            headersMapper: Mappers.TestUploadHashHeaders
        },
        412: {}
    },
    requestBody: Parameters.fileInfo1,
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId
    ],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const startUploadingFileOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: Mappers.TestStartUploadingFileHeaders
        },
        400: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId
    ],
    serializer
};
const getTestRunOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TestRun0
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const archiveTestRunOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.TestRun1
        },
        404: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.testRunId1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getTestRunsOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Paths1CxzjsgV01AppsOwnerNameAppNameTestRunsGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const createTestRunOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test_runs",
    httpMethod: "POST",
    responses: {
        201: {
            headersMapper: Mappers.TestCreateTestRunHeaders
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    serializer
};
const gdprExportTestRunOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths1UxedxfV01AppsOwnerNameAppNameTestExportTestrunsGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const gdprExportPipelineTestOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths17A5P9IV01AppsOwnerNameAppNameTestExportPipelinetestsGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const gdprExportHashFileOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PathsQpbfbqV01AppsOwnerNameAppNameTestExportHashfilesGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const gdprExportFileSetFileOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths18Bwc0DV01AppsOwnerNameAppNameTestExportFilesetfilesGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const gdprExportAppOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test/export/apps",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths1D5PwtqV01AppsOwnerNameAppNameTestExportAppsGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const gdprExportAppsOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/test/export",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PathsTbqb7JV01AppsOwnerNameAppNameTestExportGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const getSubscriptionsOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/subscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Subscription0
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const createSubscriptionOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/subscriptions",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.Subscription1
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeviceSetOfOwnerOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeviceSet2
        },
        404: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.id2
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateDeviceSetOfOwnerOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.DeviceSet3
        },
        400: {
            bodyMapper: Mappers.TestCloudErrorDetails2
        },
        404: {}
    },
    requestBody: {
        parameterPath: { devices: ["devices"], name: ["name"] },
        mapper: Object.assign(Object.assign({}, Mappers.DeviceSetUpdateInformation1), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.id2
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteDeviceSetOfOwnerOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}",
    httpMethod: "DELETE",
    responses: { 200: {}, 404: {} },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.id2
    ],
    serializer
};
const listDeviceSetsOfOwnerOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Paths1Qu9NsjV01AppsOwnerNameAppNameOwnerDeviceSetsGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const createDeviceSetOfOwnerOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.DeviceSet4
        },
        400: {
            bodyMapper: Mappers.TestCloudErrorDetails3
        }
    },
    requestBody: {
        parameterPath: { devices: ["devices"], name: ["name"] },
        mapper: Object.assign(Object.assign({}, Mappers.DeviceSetUpdateInformation2), { required: true })
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const createDeviceSelectionOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/device_selection",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.DeviceSelection
        },
        400: {
            bodyMapper: Mappers.TestCloudErrorDetails4
        }
    },
    requestBody: {
        parameterPath: { devices: ["devices"] },
        mapper: Object.assign(Object.assign({}, Mappers.DeviceList), { required: true })
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const getDeviceConfigurationsOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/device_configurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Paths1Wime0YV01AppsOwnerNameAppNameDeviceConfigurationsGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        }
    },
    queryParameters: [Parameters.appUploadId],
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const gdprExportFeatureFlagOperationSpec = {
    path: "/v0.1/account/test/export/featureFlags",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths120IxifV01AccountTestExportFeatureflagsGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const gdprExportAccountOperationSpec = {
    path: "/v0.1/account/test/export/accounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PathsK7Amr2V01AccountTestExportAccountsGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const gdprExportAccountsOperationSpec = {
    path: "/v0.1/account/test/export",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PathsIp035RV01AccountTestExportGetResponses200ContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
