"use strict";
/*
 * Copyright (c) MappDL Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by MappDL (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DistributionGroupsImpl = void 0;
const coreClient = require("@azure/core-client");
const Mappers = require("../models/mappers");
const Parameters = require("../models/parameters");
/** Class containing DistributionGroups operations. */
class DistributionGroupsImpl {
    /**
     * Initialize a new instance of the class DistributionGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns a unique list of users including the whole organization members plus testers in any shared
     * group of that org
     * @param orgName The organization's name
     * @param options The options parameters.
     */
    listAllTestersForOrg(orgName, options) {
        return this.client.sendOperationRequest({ orgName, options }, listAllTestersForOrgOperationSpec);
    }
    /**
     * Returns a list of distribution groups with details for an organization
     * @param orgName The organization's name
     * @param options The options parameters.
     */
    detailsForOrg(orgName, options) {
        return this.client.sendOperationRequest({ orgName, options }, detailsForOrgOperationSpec);
    }
    /**
     * Resend shared distribution group invite notification to previously invited testers
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    resendSharedInvite(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, resendSharedInviteOperationSpec);
    }
    /**
     * Delete testers from distribution group in an org
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    bulkDeleteUsers(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, bulkDeleteUsersOperationSpec);
    }
    /**
     * Returns a list of member in the distribution group specified
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    listUsersForOrg(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, listUsersForOrgOperationSpec);
    }
    /**
     * Accepts an array of user email addresses to get added to the specified group
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    addUsersForOrg(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, addUsersForOrgOperationSpec);
    }
    /**
     * Delete apps from distribution group in an org
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    bulkDeleteApps(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, bulkDeleteAppsOperationSpec);
    }
    /**
     * Get apps from a distribution group in an org
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    getApps(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, getAppsOperationSpec);
    }
    /**
     * Add apps to distribution group in an org
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    addApps(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, addAppsOperationSpec);
    }
    /**
     * Returns a single distribution group in org for a given distribution group name
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    getForOrg(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, getForOrgOperationSpec);
    }
    /**
     * Update one given distribution group name in an org
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    patchForOrg(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, patchForOrgOperationSpec);
    }
    /**
     * Deletes a single distribution group from an org with a given distribution group name
     * @param orgName The organization's name
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    deleteForOrg(orgName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ orgName, distributionGroupName, options }, deleteForOrgOperationSpec);
    }
    /**
     * Creates a disribution goup which can be shared across apps under an organization
     * @param orgName The organization's name
     * @param name The name of the distribution group
     * @param options The options parameters.
     */
    createForOrg(orgName, name, options) {
        return this.client.sendOperationRequest({ orgName, name, options }, createForOrgOperationSpec);
    }
    /**
     * Returns a list of distribution groups in the org specified
     * @param orgName The organization's name
     * @param options The options parameters.
     */
    listForOrg(orgName, options) {
        return this.client.sendOperationRequest({ orgName, options }, listForOrgOperationSpec);
    }
    /**
     * Resend distribution group app invite notification to previously invited testers
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    resendInvite(ownerName, appName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, distributionGroupName, options }, resendInviteOperationSpec);
    }
    /**
     * Remove the users from the distribution group
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    removeUser(ownerName, appName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, distributionGroupName, options }, removeUserOperationSpec);
    }
    /**
     * Returns a list of member details in the distribution group specified
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    listUsers(ownerName, appName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, distributionGroupName, options }, listUsersOperationSpec);
    }
    /**
     * Adds the members to the specified distribution group
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    addUser(ownerName, appName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, distributionGroupName, options }, addUserOperationSpec);
    }
    /**
     * Returns a single distribution group for a given distribution group name
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    get(ownerName, appName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, distributionGroupName, options }, getOperationSpec);
    }
    /**
     * Updates the attributes of distribution group
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    update(ownerName, appName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, distributionGroupName, options }, updateOperationSpec);
    }
    /**
     * Deletes a distribution group
     * @param appName The name of the application
     * @param ownerName The name of the owner
     * @param distributionGroupName The name of the distribution group
     * @param options The options parameters.
     */
    delete(appName, ownerName, distributionGroupName, options) {
        return this.client.sendOperationRequest({ appName, ownerName, distributionGroupName, options }, deleteOperationSpec);
    }
    /**
     * Returns a list of distribution groups in the app specified
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    list(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, listOperationSpec);
    }
    /**
     * Creates a new distribution group and returns it to the caller
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param name The name of the distribution group
     * @param options The options parameters.
     */
    create(ownerName, appName, name, options) {
        return this.client.sendOperationRequest({ ownerName, appName, name, options }, createOperationSpec);
    }
}
exports.DistributionGroupsImpl = DistributionGroupsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listAllTestersForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/testers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsZcvkocV01OrgsOrgNameTestersGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.Paths10C9NtgV01OrgsOrgNameTestersGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.orgName],
    headerParameters: [Parameters.accept],
    serializer
};
const detailsForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups_details",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsN5ZsaaV01OrgsOrgNameDistributionGroupsDetailsGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.Paths1Qqyun6V01OrgsOrgNameDistributionGroupsDetailsGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    queryParameters: [Parameters.appsLimit],
    urlParameters: [Parameters.$host, Parameters.orgName],
    headerParameters: [Parameters.accept],
    serializer
};
const resendSharedInviteOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite",
    httpMethod: "POST",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.Paths1Mw5PtqV01OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: { userEmails: ["options", "userEmails"] },
        mapper: Object.assign(Object.assign({}, Mappers.Paths3EixoV01OrgsOrgNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const bulkDeleteUsersOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete",
    httpMethod: "POST",
    responses: { 204: {} },
    requestBody: {
        parameterPath: { userEmails: ["options", "userEmails"] },
        mapper: Object.assign(Object.assign({}, Mappers.Paths10EomnwV01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const listUsersForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Paths1Emeq4QV01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.Paths1Xv7MxwV01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const addUsersForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Post200ApplicationJsonItemsItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.Paths1Bvy48CV01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: { userEmails: ["options", "userEmails"] },
        mapper: Object.assign(Object.assign({}, Mappers.PathsSmhj37V01OrgsOrgNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const bulkDeleteAppsOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete",
    httpMethod: "POST",
    responses: { 204: {} },
    requestBody: {
        parameterPath: { apps: ["options", "apps"] },
        mapper: Object.assign(Object.assign({}, Mappers.PathsMs4QhdV01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsBulkDeletePostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAppsOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Paths1FzizdmV01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const addAppsOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps",
    httpMethod: "POST",
    responses: { 204: {} },
    requestBody: {
        parameterPath: { apps: ["options", "apps"] },
        mapper: Object.assign(Object.assign({}, Mappers.PathsIy66N7V01OrgsOrgNameDistributionGroupsDistributionGroupNameAppsPostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const getForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths1O9EmfnV01OrgsOrgNameDistributionGroupsDistributionGroupNameGetResponses200ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.Paths18ObgfsV01OrgsOrgNameDistributionGroupsDistributionGroupNameGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const patchForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Paths8Ig5HaV01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchResponses200ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.PathsFf3Vb5V01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: {
            name: ["options", "name"],
            isPublic: ["options", "isPublic"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.Paths6RaacuV01OrgsOrgNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.PathsG4K3OdV01OrgsOrgNameDistributionGroupsDistributionGroupNameDeleteResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.distributionGroupName,
        Parameters.orgName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.Paths19Pq8TpV01OrgsOrgNameDistributionGroupsPostResponses201ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.Paths210VmzV01OrgsOrgNameDistributionGroupsPostResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: { name: ["name"], displayName: ["options", "displayName"] },
        mapper: Object.assign(Object.assign({}, Mappers.Paths150Qpz7V01OrgsOrgNameDistributionGroupsPostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [Parameters.$host, Parameters.orgName],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const listForOrgOperationSpec = {
    path: "/v0.1/orgs/{org_name}/distribution_groups",
    httpMethod: "GET",
    responses: {
        201: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Get201ApplicationJsonItemsItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.Paths5T6Uy5V01OrgsOrgNameDistributionGroupsGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.orgName],
    headerParameters: [Parameters.accept],
    serializer
};
const resendInviteOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite",
    httpMethod: "POST",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.Paths1NlleszV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: { userEmails: ["options", "userEmails"] },
        mapper: Object.assign(Object.assign({}, Mappers.Paths1C26JzV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameResendInvitePostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.distributionGroupName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const removeUserOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsH5A3IoV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.PathsAiyp0KV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: { userEmails: ["options", "userEmails"] },
        mapper: Object.assign(Object.assign({}, Mappers.PathsLx7ZdvV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersBulkDeletePostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.distributionGroupName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const listUsersOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsV8RijtV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.PathsDswa3EV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    queryParameters: [Parameters.excludePendingInvitations],
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.distributionGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const addUserOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PathsQb9V9JV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.Paths27EeybV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: { userEmails: ["options", "userEmails"] },
        mapper: Object.assign(Object.assign({}, Mappers.Paths9330UyV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameMembersPostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.distributionGroupName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths1Wh2QvoV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameGetResponses200ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.PathsM9Ao2YV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.distributionGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Paths15Yrg8NV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchResponses200ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.Paths1Nibs8HV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: {
            name: ["options", "name"],
            isPublic: ["options", "isPublic"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.Paths1Y98SmdV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNamePatchRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.distributionGroupName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.PathsKwupmvV01AppsOwnerNameAppNameDistributionGroupsDistributionGroupNameDeleteResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.distributionGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Paths1O1HkymV01AppsOwnerNameAppNameDistributionGroupsGetResponses200ContentApplicationJsonSchemaItems"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.Paths9Wjl67V01AppsOwnerNameAppNameDistributionGroupsGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/distribution_groups",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.Paths7NhijrV01AppsOwnerNameAppNameDistributionGroupsPostResponses201ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.Paths5IifpfV01AppsOwnerNameAppNameDistributionGroupsPostResponsesDefaultContentApplicationJsonSchema
        }
    },
    requestBody: {
        parameterPath: { name: ["name"], displayName: ["options", "displayName"] },
        mapper: Object.assign(Object.assign({}, Mappers.PathsFdbuo5V01AppsOwnerNameAppNameDistributionGroupsPostRequestbodyContentApplicationJsonSchema), { required: true })
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
