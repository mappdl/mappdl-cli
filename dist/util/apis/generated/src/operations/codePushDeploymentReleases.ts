/*
 * Copyright (c) MappDL Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by MappDL (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CodePushDeploymentReleases } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MappDLClient } from "../mappDLClient";
import {
  CodePushDeploymentReleasesDeleteOptionalParams,
  CodePushDeploymentReleasesGetOptionalParams,
  CodePushDeploymentReleasesGetResponse,
  Paths1Q5DgwjV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostRequestbodyContentApplicationJsonSchema,
  CodePushDeploymentReleasesCreateOptionalParams,
  CodePushDeploymentReleasesCreateResponse
} from "../models";

/** Class containing CodePushDeploymentReleases operations. */
export class CodePushDeploymentReleasesImpl
  implements CodePushDeploymentReleases {
  private readonly client: MappDLClient;

  /**
   * Initialize a new instance of the class CodePushDeploymentReleases class.
   * @param client Reference to the service client
   */
  constructor(client: MappDLClient) {
    this.client = client;
  }

  /**
   * Clears a Deployment of releases
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  delete(
    ownerName: string,
    appName: string,
    options?: CodePushDeploymentReleasesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { ownerName, appName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets the history of releases on a Deployment
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param options The options parameters.
   */
  get(
    ownerName: string,
    appName: string,
    options?: CodePushDeploymentReleasesGetOptionalParams
  ): Promise<CodePushDeploymentReleasesGetResponse> {
    return this.client.sendOperationRequest(
      { ownerName, appName, options },
      getOperationSpec
    );
  }

  /**
   * Create a new CodePush release for the specified deployment
   * @param ownerName The name of the owner
   * @param appName The name of the application
   * @param uploadedRelease The necessary information required to download the bundle and being the
   *                        release process.
   * @param options The options parameters.
   */
  create(
    ownerName: string,
    appName: string,
    uploadedRelease: Paths1Q5DgwjV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostRequestbodyContentApplicationJsonSchema,
    options?: CodePushDeploymentReleasesCreateOptionalParams
  ): Promise<CodePushDeploymentReleasesCreateResponse> {
    return this.client.sendOperationRequest(
      { ownerName, appName, uploadedRelease, options },
      createOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/v0.1/apps/{owner_name}/{app_name}/deployments/releases",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper:
        Mappers.Paths2Uoo4MV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesDeleteResponsesDefaultContentApplicationJsonSchema
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/v0.1/apps/{owner_name}/{app_name}/deployments/releases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "PathsJ4L197V01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesGetResponses200ContentApplicationJsonSchemaItems"
            }
          }
        }
      }
    },
    default: {
      bodyMapper:
        Mappers.PathsSxykieV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesGetResponsesDefaultContentApplicationJsonSchema
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/v0.1/apps/{owner_name}/{app_name}/deployments/releases",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper:
        Mappers.Paths1N68We7V01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostResponses201ContentApplicationJsonSchema
    },
    default: {
      bodyMapper:
        Mappers.PathsWqgstxV01AppsOwnerNameAppNameDeploymentsDeploymentNameReleasesPostResponsesDefaultContentApplicationJsonSchema
    }
  },
  requestBody: Parameters.uploadedRelease,
  urlParameters: [
    Parameters.$host,
    Parameters.ownerName,
    Parameters.appName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
