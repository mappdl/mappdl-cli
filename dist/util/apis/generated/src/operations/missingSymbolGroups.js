"use strict";
/*
 * Copyright (c) MappDL Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by MappDL (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MissingSymbolGroupsImpl = void 0;
const coreClient = require("@azure/core-client");
const Mappers = require("../models/mappers");
const Parameters = require("../models/parameters");
/** Class containing MissingSymbolGroups operations. */
class MissingSymbolGroupsImpl {
    /**
     * Initialize a new instance of the class MissingSymbolGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets application level statistics for all missing symbol groups
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    info(ownerName, appName, options) {
        return this.client.sendOperationRequest({ ownerName, appName, options }, infoOperationSpec);
    }
    /**
     * Gets missing symbol crash group by its id
     * @param symbolGroupId missing symbol crash group id
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    get(symbolGroupId, ownerName, appName, options) {
        return this.client.sendOperationRequest({ symbolGroupId, ownerName, appName, options }, getOperationSpec);
    }
    /**
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * @param top top N elements
     * @param ownerName The name of the owner
     * @param appName The name of the application
     * @param options The options parameters.
     */
    list(top, ownerName, appName, options) {
        return this.client.sendOperationRequest({ top, ownerName, appName, options }, listOperationSpec);
    }
}
exports.MissingSymbolGroupsImpl = MissingSymbolGroupsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const infoOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths11FvsglV01AppsOwnerNameAppNameDiagnosticsSymbolGroupsInfoGetResponses200ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.Paths1WfkyxuV01AppsOwnerNameAppNameDiagnosticsSymbolGroupsInfoGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Paths12L0F2LV01AppsOwnerNameAppNameDiagnosticsSymbolGroupsSymbolGroupIdGetResponses200ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.Paths4Cl255V01AppsOwnerNameAppNameDiagnosticsSymbolGroupsSymbolGroupIdGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.ownerName,
        Parameters.appName,
        Parameters.symbolGroupId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PathsQn5ExjV01AppsOwnerNameAppNameDiagnosticsSymbolGroupsGetResponses200ContentApplicationJsonSchema
        },
        default: {
            bodyMapper: Mappers.Paths1ByvenaV01AppsOwnerNameAppNameDiagnosticsSymbolGroupsGetResponsesDefaultContentApplicationJsonSchema
        }
    },
    queryParameters: [Parameters.filter, Parameters.top3],
    urlParameters: [Parameters.$host, Parameters.ownerName, Parameters.appName],
    headerParameters: [Parameters.accept],
    serializer
};
