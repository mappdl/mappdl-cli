"use strict";
/*
 * Copyright (c) MappDL Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by MappDL (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MappDLClient = void 0;
const coreClient = require("@azure/core-client");
const operations_1 = require("./operations");
const codePushDeploymentFileUpload_1 = require("./operations/codePushDeploymentFileUpload");
class MappDLClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the MappDLClient class.
     * @param options The parameter options
     */
    constructor(options) {
        var _a;
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8"
        };
        const packageDetails = `azsdk-js-mappDLClient/1.0.0-beta.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_a = options.endpoint) !== null && _a !== void 0 ? _a : "https://api.mappdl.com" });
        super(optionsWithDefaults);
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://api.mappdl.com";
        this.devices = new operations_1.DevicesImpl(this);
        this.notifications = new operations_1.NotificationsImpl(this);
        this.users = new operations_1.UsersImpl(this);
        this.orgInvitations = new operations_1.OrgInvitationsImpl(this);
        this.distributionGroupInvitations = new operations_1.DistributionGroupInvitationsImpl(this);
        this.appInvitations = new operations_1.AppInvitationsImpl(this);
        this.sharedconnection = new operations_1.SharedconnectionImpl(this);
        this.dataSubjectRight = new operations_1.DataSubjectRightImpl(this);
        this.releases = new operations_1.ReleasesImpl(this);
        this.apps = new operations_1.AppsImpl(this);
        this.distributionGroups = new operations_1.DistributionGroupsImpl(this);
        this.teams = new operations_1.TeamsImpl(this);
        this.azureSubscription = new operations_1.AzureSubscriptionImpl(this);
        this.organization = new operations_1.OrganizationImpl(this);
        this.organizations = new operations_1.OrganizationsImpl(this);
        this.billingAggregatedInformation = new operations_1.BillingAggregatedInformationImpl(this);
        this.legacyCodePushAcquisition = new operations_1.LegacyCodePushAcquisitionImpl(this);
        this.invitations = new operations_1.InvitationsImpl(this);
        this.builds = new operations_1.BuildsImpl(this);
        this.webhooks = new operations_1.WebhooksImpl(this);
        this.crashes = new operations_1.CrashesImpl(this);
        this.test = new operations_1.TestImpl(this);
        this.symbols = new operations_1.SymbolsImpl(this);
        this.symbolUploads = new operations_1.SymbolUploadsImpl(this);
        this.storeNotifications = new operations_1.StoreNotificationsImpl(this);
        this.repositories = new operations_1.RepositoriesImpl(this);
        this.repositoryConfigurations = new operations_1.RepositoryConfigurationsImpl(this);
        this.provisioning = new operations_1.ProvisioningImpl(this);
        this.push = new operations_1.PushImpl(this);
        this.fileAssets = new operations_1.FileAssetsImpl(this);
        this.exportConfigurations = new operations_1.ExportConfigurationsImpl(this);
        this.errors = new operations_1.ErrorsImpl(this);
        this.storeReleases = new operations_1.StoreReleasesImpl(this);
        this.storeReleasePublishLogs = new operations_1.StoreReleasePublishLogsImpl(this);
        this.stores = new operations_1.StoresImpl(this);
        this.missingSymbolGroups = new operations_1.MissingSymbolGroupsImpl(this);
        this.app = new operations_1.AppImpl(this);
        this.codePushDeploymentUpload = new operations_1.CodePushDeploymentUploadImpl(this);
        this.codePushDeploymentFileUpload = new codePushDeploymentFileUpload_1.codePushDeploymentFileUploadImpl(this);
        this.codePushDeploymentRelease = new operations_1.CodePushDeploymentReleaseImpl(this);
        this.deploymentReleases = new operations_1.DeploymentReleasesImpl(this);
        this.codePushDeploymentReleases = new operations_1.CodePushDeploymentReleasesImpl(this);
        this.codePushDeployments = new operations_1.CodePushDeploymentsImpl(this);
        this.codePushDeploymentMetrics = new operations_1.CodePushDeploymentMetricsImpl(this);
        this.data = new operations_1.DataImpl(this);
        this.crashGroups = new operations_1.CrashGroupsImpl(this);
        this.commits = new operations_1.CommitsImpl(this);
        this.bugTracker = new operations_1.BugTrackerImpl(this);
        this.branchConfigurations = new operations_1.BranchConfigurationsImpl(this);
        this.identity = new operations_1.IdentityImpl(this);
        this.appleMapping = new operations_1.AppleMappingImpl(this);
        this.appApiTokens = new operations_1.AppApiTokensImpl(this);
        this.analytics = new operations_1.AnalyticsImpl(this);
        this.userApiTokens = new operations_1.UserApiTokensImpl(this);
    }
}
exports.MappDLClient = MappDLClient;
